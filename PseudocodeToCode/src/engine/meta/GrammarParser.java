package engine.meta;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;


public class GrammarParser {
DocumentBuilderFactory factory;
DocumentBuilder builder;
Document doc;
XPathFactory Xfactory;
XPath xpath;
ArrayList<String> next;
public GrammarParser(String fileName) throws Exception
{
	factory = DocumentBuilderFactory.newInstance();
	factory.setNamespaceAware(true); 
	builder = factory.newDocumentBuilder();
	doc = builder.parse(fileName);
	Xfactory = XPathFactory.newInstance();
    xpath = Xfactory.newXPath();
    next=new ArrayList<String>(5);
}


public Production getProduction(String name) throws Exception
{
	XPathExpression expr=null;
    Production start=new Production();
    
    start.name=name;
    
    expr = xpath.compile("//Production[@name='"+name+"']/value");
    start.value=this.getValue(expr);

    if(start.value == null){
    	start.isToken=true;
    	return start;
    }
    
    expr = xpath.compile("//Production[@name='"+name+"']"+"/components/component");
    start.components=this.getList(expr);
   
    expr = xpath.compile("//Production[@name='"+name+"']/next");
    start.next=this.getList(expr);

    expr = xpath.compile("//Production[@name='"+name+"']/auto");
    if(this.getValue(expr) != null){
    	start.isAutoGenerated=true;	
    }
    return start;   
}
 

public String getValue(XPathExpression expr) throws XPathExpressionException 
{
	Object result = expr.evaluate(doc, XPathConstants.NODE);
	if(result == null){
		return null;
	}
    Element element=(Element)result;
	return element.getTextContent().trim();
}

	public ArrayList<String> getList(XPathExpression expr) throws Exception {

		Object result = expr.evaluate(doc, XPathConstants.NODESET);
		NodeList nodelist = (NodeList) result;

		ArrayList<String> tmp = new ArrayList<String>(5);
		String value;
		for (int i = 0; i < nodelist.getLength(); i++) {
			value = nodelist.item(i).getTextContent().trim();
			tmp.add(value);
		}

		return tmp;
	}
	
	public String findRuleFromGrammar(String line) throws XPathExpressionException{
		for(String word:line.split(" ")){
			XPathExpression expr = xpath.compile("//Production[startsWith ='"+word+"')");
			System.out.println(getValue(expr));
		}
		return null;
	}
}
